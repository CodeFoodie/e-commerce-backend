{"version":3,"sources":["../../src/controllers/authenticaton.js"],"names":["baseUrl","getCallbackUrls","Authentication","signUpUser","req","res","email","body","userExits","models","Users","findOne","where","status","conflict","messages","signUp","user","create","response","toJSON","id","first_name","token","Jwt","generateToken","link","services","sendEmail","created","success","error","updatePassword","password","userData","update","is_verified","returning","plain","dataValues","signInUser","unauthorized","signIn","invalid","mobile_number","last_name","state","local_government_area","address","unverified","isPasswordValid","bcrypt","comparePassword","console","log","forgotPassword","message"],"mappings":"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","sourcesContent":["/* eslint-disable max-len */\n/* eslint-disable camelcase */\nimport models from '../models';\nimport * as services from '../services';\nimport {\n  status, messages, hashPassword, generateToken,\n  successResponse, errorResponse, conflictResponse, Jwt, bcrypt, getCallbackUrls\n} from '../utils/index';\n\nconst { baseUrl } = getCallbackUrls;\n\n/**\n * @class UserController\n * @description Controllers for Users\n * @exports UsersController\n */\nexport default class Authentication {\n  /**\n   * @method signUpUser\n   * @description Method for user registration\n   * @param {object} req - The Request Object\n   * @param {object} res - The Response Object\n   * @returns {object} response body object\n   */\n  static async signUpUser(req, res) {\n    try {\n      const { email } = req.body;\n      const userExits = await models.Users.findOne({ where: { email } });\n      if (userExits) {\n        return conflictResponse(res, status.conflict, messages.signUp.conflict);\n      }\n      const user = await models.Users.create(req.body);\n      const response = user.toJSON();\n      // eslint-disable-next-line camelcase\n      const { id, first_name } = user;\n      const token = await Jwt.generateToken({ id, first_name });\n      const link = `${baseUrl}/users/createpassword?token=${token}`;\n      await services.sendEmail(email, 'welcome', { first_name, link });\n      return successResponse(res, status.created, messages.signUp.success, response, token);\n    } catch (error) {\n      return errorResponse(res, status.error, messages.signUp.error);\n    }\n  }\n\n  \n  /**\n   * @method updatePassword\n   * @description Method for updating password\n   * @param {object} req - The Request Object\n   * @param {object} res - The Response Object\n   * @returns {object} response body object\n   */\n  static async updatePassword(req, res) {\n    const { id } = req.user;\n    req.body.password = await hashPassword(req.body.password);\n\n    try {\n      // eslint-disable-next-line max-len\n      const userData = await models.Users.update({ is_verified: true, password: req.body.password }, {\n        where: { id },\n        returning: true,\n        plain: true\n      });\n      const { is_verified } = userData[1].dataValues;\n      if (userData) {\n        return successResponse(res, 200, 'Password Updated successful. login to update your profile', { id, is_verified });\n      }\n    } catch (error) {\n      errorResponse(res, 403, 'Account confirmation link Invalid');\n    }\n  }\n\n  /**\n   * @method signInUser\n   * @description Method for user sign in\n   * @param {object} req - The Request Object\n   * @param {object} res - The Response Object\n   * @returns {object} response body object\n   */\n  static async signInUser(req, res) {\n    try {\n      const { email, password } = req.body;\n      const user = await models.Users.findOne({ where: { email } });\n      if (!user) {\n        return errorResponse(res, status.unauthorized, messages.signIn.invalid);\n      }\n      const {\n        id, mobile_number, first_name, last_name, is_verified, state, local_government_area, address\n      } = user;\n\n      if (!is_verified) {\n        return errorResponse(res, status.unauthorized, messages.signIn.unverified);\n      }\n      const isPasswordValid = await bcrypt.comparePassword(user.password, password);\n\n      if (!isPasswordValid) {\n        return errorResponse(res, status.unauthorized, messages.signIn.invalid);\n      }\n\n      const response = {\n        id, email, mobile_number, first_name, last_name, is_verified, state, local_government_area, address\n      };\n      const token = await Jwt.generateToken({ id });\n      return successResponse(res, status.success, messages.signIn.success, response, token);\n    } catch (error) {\n      console.log(error);\n      return errorResponse(res, status.error, messages.signIn.error);\n    }\n  }\n\n\n  /**\n   * @method forgotPassword\n   * @description Method for user registration\n   * @param {object} req - The Request Object\n   * @param {object} res - The Response Object\n   * @returns {object} response body object\n   */\n  static async forgotPassword(req, res) {\n    try {\n      const { email } = req.body;\n      const userExits = await models.Users.findOne({ where: { email } });\n      if (!userExits) {\n        return errorResponse(res, 404, 'No user with email');\n      }\n      const { id, first_name } = userExits;\n      const token = await Jwt.generateToken({ id, first_name });\n      const link = `${baseUrl}/users/createPassword?token=${token}`;\n      await services.sendEmail(email, 'welcome', { first_name, link });\n      return successResponse(res, status.success, 'Password Reset Link sent Successfuly', { id, first_name, email }, token);\n    } catch (error) {\n      return errorResponse(res, 500, error.message);\n    }\n  }\n}\n"],"file":"authenticaton.js"}