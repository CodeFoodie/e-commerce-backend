{"version":3,"sources":["../../src/controllers/authenticaton.js"],"names":["baseUrl","getCallbackUrls","association","model","models","Cart","as","attributes","Authentication","signUpUser","req","res","email","body","userExits","Users","findOne","where","status","conflict","messages","signUp","user","create","response","toJSON","password","id","first_name","token","Jwt","generateToken","link","services","sendEmail","created","success","error","updatePassword","userData","update","is_verified","returning","plain","dataValues","signInUser","include","unauthorized","signIn","invalid","mobile_number","last_name","state","local_government_area","address","carts","unverified","isPasswordValid","bcrypt","comparePassword","forgotPassword","message"],"mappings":"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","sourcesContent":["/* eslint-disable max-len */\n/* eslint-disable camelcase */\nimport models from '../models';\nimport * as services from '../services';\nimport {\n  status, messages, hashPassword, generateToken,\n  successResponse, errorResponse, conflictResponse, Jwt, bcrypt, getCallbackUrls\n} from '../utils/index';\n\nconst { baseUrl } = getCallbackUrls;\n\nconst association = [\n  {\n    model: models.Cart,\n    as: 'carts',\n    attributes: ['id', 'items', 'subtotal', 'shipping', 'total', 'status']\n  }\n];\n\n/**\n * @class Authentication\n * @description Controllers for Authentication\n * @exports Authentication\n */\nexport default class Authentication {\n  /**\n   * @method signUpUser\n   * @description Method for user registration\n   * @param {object} req - The Request Object\n   * @param {object} res - The Response Object\n   * @returns {object} response body object\n   */\n  static async signUpUser(req, res) {\n    try {\n      const { email } = req.body;\n      const userExits = await models.Users.findOne({ where: { email } });\n      if (userExits) {\n        return conflictResponse(res, status.conflict, messages.signUp.conflict);\n      }\n      const user = await models.Users.create(req.body);\n      const response = user.toJSON();\n      delete response.password;\n      // eslint-disable-next-line camelcase\n      const { id, first_name } = user;\n      const token = await Jwt.generateToken({ id, first_name });\n      const link = `${baseUrl}/users/createpassword?token=${token}`;\n      await services.sendEmail(email, 'welcome', { first_name, link });\n      return successResponse(res, status.created, messages.signUp.success, response, token);\n    } catch (error) {\n      return errorResponse(res, status.error, messages.signUp.error);\n    }\n  }\n\n  \n  /**\n   * @method updatePassword\n   * @description Method for updating password\n   * @param {object} req - The Request Object\n   * @param {object} res - The Response Object\n   * @returns {object} response body object\n   */\n  static async updatePassword(req, res) {\n    const { id } = req.user;\n    req.body.password = await hashPassword(req.body.password);\n\n    try {\n      // eslint-disable-next-line max-len\n      const userData = await models.Users.update({ is_verified: true, password: req.body.password }, {\n        where: { id },\n        returning: true,\n        plain: true\n      });\n      const { is_verified } = userData[1].dataValues;\n      if (userData) {\n        return successResponse(res, 200, 'Password Updated successful. login to update your profile', { id, is_verified });\n      }\n    } catch (error) {\n      errorResponse(res, 403, 'Account confirmation link Invalid');\n    }\n  }\n\n  /**\n   * @method signInUser\n   * @description Method for user sign in\n   * @param {object} req - The Request Object\n   * @param {object} res - The Response Object\n   * @returns {object} response body object\n   */\n  static async signInUser(req, res) {\n    try {\n      const { email, password } = req.body;\n      const user = await models.Users.findOne({ where: { email }, include: association });\n      if (!user) {\n        return errorResponse(res, status.unauthorized, messages.signIn.invalid);\n      }\n      const {\n        id, mobile_number, first_name, last_name, is_verified, state, local_government_area, address, carts\n      } = user;\n\n      if (!is_verified) {\n        return errorResponse(res, status.unauthorized, messages.signIn.unverified);\n      }\n      const isPasswordValid = await bcrypt.comparePassword(user.password, password);\n\n      if (!isPasswordValid) {\n        return errorResponse(res, status.unauthorized, messages.signIn.invalid);\n      }\n\n      const response = {\n        id, email, mobile_number, first_name, last_name, is_verified, state, local_government_area, address, carts\n      };\n      const token = await Jwt.generateToken({ id });\n      return successResponse(res, status.success, messages.signIn.success, response, token);\n    } catch (error) {\n      return errorResponse(res, status.error, messages.signIn.error);\n    }\n  }\n\n\n  /**\n   * @method forgotPassword\n   * @description Method for user registration\n   * @param {object} req - The Request Object\n   * @param {object} res - The Response Object\n   * @returns {object} response body object\n   */\n  static async forgotPassword(req, res) {\n    try {\n      const { email } = req.body;\n      const userExits = await models.Users.findOne({ where: { email } });\n      if (!userExits) {\n        return errorResponse(res, 404, 'No user with email');\n      }\n      const { id, first_name } = userExits;\n      const token = await Jwt.generateToken({ id, first_name });\n      const link = `${baseUrl}/users/createPassword?token=${token}`;\n      await services.sendEmail(email, 'welcome', { first_name, link });\n      return successResponse(res, status.success, 'Password Reset Link sent Successfuly', { id, first_name, email }, token);\n    } catch (error) {\n      return errorResponse(res, 500, error.message);\n    }\n  }\n}\n"],"file":"authenticaton.js"}