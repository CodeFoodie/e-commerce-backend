{"version":3,"sources":["../../../src/validation/validators/rules.js"],"names":["nameRegex","checkEmail","input","message","not","isEmpty","isEmail","withMessage","validateEmail","signUp","custom","value","validatePhoneNumber","validate","Error","matches","trim","updatePassword","isLength","min","req","body","password","signIn","addProduct","image","file","originalname","match","isInt","addCart","isArray","isBoolean"],"mappings":"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","sourcesContent":["import { body } from 'express-validator';\nimport validatePhoneNumber from 'validate-phone-number-node-js';\n// import statesInNigeria from './NigerianStates';\n\n// add validation rules here.\n\n/* regex description\nthe regex /^[A-Za-z\\-']{2,250}$/\nis made up of a single character set, between\n[], with a quantifier {2,250}\nA-Za-z => matches upper and lowercase alphabets\n\\-' => matches a - and a '\nthe last {2,250} is a quantifier specifying that the character been matched\nshould be > 1 and <= 250\nthe ^ and $ runs the match from the beginning and end of the string\n*/\nconst nameRegex = /^[A-Za-z\\-']{2,20}$/;\n\nconst checkEmail = (input, message) => body(input)\n  .not()\n  .isEmpty()\n  .isEmail()\n  .withMessage(message);\n\nexport const validateEmail = [\n  checkEmail('email', 'Please provide a valid email')\n];\n\nexport const signUp = [\n  body('email', 'Please provide a valid email')\n    .isEmail()\n    .not()\n    .isEmpty(),\n  body('mobile_number').custom((value) => {\n    if (validatePhoneNumber.validate(value) !== true) {\n      throw new Error('Invalid mobile number');\n    }\n    return true;\n  }),\n  body('first_name', 'First name should be alphabets between 2 and 20 characters')\n    .matches(nameRegex)\n    .trim(),\n  body('last_name', 'Last name should be alphabets between 2 and 20 characters')\n    .matches(nameRegex)\n    .trim(),\n];\n\nexport const updatePassword = [\n  body('password', 'password should be at least 6 characters').isLength({ min: 6 }),\n  body('confirmPassword').custom((value, { req }) => {\n    if (value !== req.body.password) {\n      throw new Error('Password confirmation does not match');\n    }\n    return true;\n  })\n];\n\nexport const signIn = [\n  body('email', 'email is invalid, please provide a valid mail')\n    .isEmail()\n    .not()\n    .isEmpty(),\n  body('password', 'password should be at least 6 characters')\n    .isLength({ min: 6 })\n    .not()\n    .isEmpty(),\n];\n\nexport const addProduct = [\n  body('image_file').custom((value, { req }) => {\n    const image = req.file;\n    if (!image.originalname.match(/\\.(jpg|jpeg|png|gif)$/i)) {\n      throw new Error('Acepted image format only: jpg, jpeg, png, gif');\n    }\n    return true;\n  }),\n  body('price', 'Price should be a valid numeric value')\n    .isInt()\n    .not()\n    .isEmpty(),\n  body('description', 'Please provide a comprehensive description')\n    .isLength({ min: 6 })\n    .not()\n    .isEmpty(),\n];\n\nexport const addCart = [\n  body('user_id', 'Please provide a valid user')\n    .isInt()\n    .not()\n    .isEmpty(),\n  body('items', 'Please provide valid list of items')\n    .isArray()\n    .not()\n    .isEmpty(),\n  body('subtotal', 'Please provide a valid numeric value')\n    .isInt()\n    .not()\n    .isEmpty(),\n  body('shipping', 'Please provide shiiping preference')\n    .isBoolean()\n    .not()\n    .isEmpty(),\n  body('total', 'Please provide a valid numeric value')\n    .isInt()\n    .not()\n    .isEmpty(),\n  body('shipping_address', 'Please provide a comprehensive shipping address')\n    .isLength({ min: 6 })\n    .not()\n    .isEmpty(),\n];\n"],"file":"rules.js"}